services:
  backend:
    build: .
    container_name: backend
    ports:
      - '3000:3000'
      - '5555:5555'
    depends_on:
      db:
        condition: service_healthy
      testdb:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: >
      sh -c "
      npx prisma migrate dev &&
      DATABASE_URL='postgresql://postgres:testpassword@testdb/testdb' npx prisma migrate dev &&
      npm run start:dev
      "

  db:
    image: postgres:13
    container_name: mydb
    env_file:
      - .env
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    command: >
      sh -c "
      docker-entrypoint.sh postgres &
      sleep 5 &&
      psql -U postgres -tc 'SELECT 1 FROM pg_database WHERE datname = ''shadowdb'';' | grep -q 1 || psql -U postgres -c 'CREATE DATABASE shadowdb;' &&
      wait"
      
  testdb:
    image: postgres:13
    container_name: testdb
    env_file:
      - .env.test
    ports:
      - '5433:5432'
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    command: >
      sh -c "
      docker-entrypoint.sh postgres &
      sleep 5 &&
      psql -U postgres -tc 'SELECT 1 FROM pg_database WHERE datname = ''shadowdb_test'';' | grep -q 1 || psql -U postgres -c 'CREATE DATABASE shadowdb_test;' &&
      wait"

volumes:
  postgres_data:
  postgres_test_data:
