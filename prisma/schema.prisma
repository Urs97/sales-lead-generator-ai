// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum EmailStatus {
  PENDING
  SENT
  OPENED
  CLICKED
  BOUNCED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  UNQUALIFIED
}

model User {
  id             String             @id @default(cuid())
  email          String             @unique
  password       String
  role           Role               @default(USER)
  organisations  UserOrganisation[]
  emailTemplates EmailTemplate[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Organisation {
  id           String             @id @default(cuid())
  name         String
  users        UserOrganisation[]
  projects     Project[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model UserOrganisation {
  userId         String
  organisationId String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisation   Organisation      @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  @@id([userId, organisationId])
}

model Project {
  id             String             @id @default(cuid())
  name           String
  organisationId String
  organisation   Organisation       @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  leads          Lead[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Lead {
  id          String      @id @default(cuid())
  name        String
  email       String
  company     String
  position    String
  status      LeadStatus  @default(NEW)
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  emailLogs   EmailLog[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model EmailTemplate {
  id          String      @id @default(cuid())
  subject     String
  body        String
  createdBy   String
  user        User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  emailLogs   EmailLog[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model EmailLog {
  id          String        @id @default(cuid())
  leadId      String
  templateId  String
  sentAt      DateTime      @default(now())
  status      EmailStatus   @default(PENDING)
  lead        Lead          @relation(fields: [leadId], references: [id], onDelete: Cascade)
  template    EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
